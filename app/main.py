from fastapi import FastAPI, Request, Form, HTTPException
from fastapi.responses import HTMLResponse, FileResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from starlette.middleware.trustedhost import TrustedHostMiddleware
import uvicorn
from datetime import datetime
import pytz
from geopy.geocoders import Nominatim
import math
from skyfield.api import load, Topos
from skyfield.data import hipparcos
import numpy as np
import pandas as pd
import json
import os
from typing import Optional, Dict, Any
import asyncio
from app.modern_sky_renderer import ModernSkyRenderer
from app.astrology_calculator import AstrologyCalculator
from pathlib import Path

app = FastAPI(title="Murphy-1", description="Explore as coordenadas do espa√ßo-tempo e encontre sua estrela-guia")

# Adicionar middleware CORS para Railway
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Adicionar middleware para trusted hosts
app.add_middleware(
    TrustedHostMiddleware,
    allowed_hosts=["*"]  # Permite qualquer host no Railway
)

# Configura√ß√£o de templates e arquivos est√°ticos
# Usar caminhos absolutos para Railway
BASE_DIR = Path(__file__).resolve().parent
templates = Jinja2Templates(directory=str(BASE_DIR / "templates"))

# Debug: verificar caminhos
print(f"üîç BASE_DIR: {BASE_DIR}")
print(f"üîç Static directory: {BASE_DIR / 'static'}")
print(f"üîç Templates directory: {BASE_DIR / 'templates'}")
print(f"üîç Static files exist: {(BASE_DIR / 'static').exists()}")
print(f"üîç CSS exists: {(BASE_DIR / 'static' / 'css' / 'style.css').exists()}")
print(f"üîç Templates directory exists: {(BASE_DIR / 'templates').exists()}")
print(f"üîç Index.html exists: {(BASE_DIR / 'templates' / 'index.html').exists()}")

# Listar arquivos no diret√≥rio de templates
if (BASE_DIR / 'templates').exists():
    print("üîç Template files:")
    for file in (BASE_DIR / 'templates').iterdir():
        print(f"   - {file.name}")

# Temporariamente desabilitado para usar fallback
# app.mount("/static", StaticFiles(directory=str(BASE_DIR / "static")), name="static")

# Middleware de debug para Railway
@app.middleware("http")
async def debug_middleware(request: Request, call_next):
    print(f"üìç Request: {request.method} {request.url.path}")
    print(f"üìç Headers: {dict(request.headers)}")
    response = await call_next(request)
    print(f"üìç Response: {response.status_code}")
    return response

# Lazy loading - criar objetos apenas quando necess√°rio
calculator = None
star_catalog = None
modern_sky_renderer = None

class AstronomicalCalculator:
    def __init__(self):
        global ts, planets
        if ts is None:
            ts = load.timescale()
            planets = load('de421.bsp')
        self.ts = ts
        self.planets = planets
        self.earth = planets['earth']
    
    def get_coordinates_from_location(self, city: str, country: str) -> tuple:
        """Obt√©m latitude e longitude a partir de cidade e pa√≠s"""
        try:
            geolocator = Nominatim(user_agent="cosmic_echo")
            location = geolocator.geocode(f"{city}, {country}")
            if location:
                return location.latitude, location.longitude
            else:
                raise ValueError("Localiza√ß√£o n√£o encontrada")
        except Exception as e:
            raise HTTPException(status_code=400, detail=f"Erro ao obter coordenadas: {str(e)}")
    
    def calculate_zenith_coordinates(self, birth_datetime: datetime, latitude: float, longitude: float) -> tuple:
        """Calcula as coordenadas do z√™nite para o momento e local espec√≠ficos"""
        import numpy as np
        
        try:
            # Verificar se as coordenadas s√£o v√°lidas
            if np.isnan(latitude) or np.isnan(longitude):
                raise ValueError(f"Coordenadas inv√°lidas: lat={latitude}, lon={longitude}")
            
            # Converter para UTC se necess√°rio
            if birth_datetime.tzinfo is None:
                birth_datetime = pytz.UTC.localize(birth_datetime)
            
            # Criar objeto de tempo Skyfield
            t = self.ts.from_datetime(birth_datetime)
            
            # Criar observador na Terra
            observer = self.earth + Topos(latitude_degrees=latitude, longitude_degrees=longitude)
            
            # O z√™nite √© simplesmente a dire√ß√£o "para cima" do observador
            # Em coordenadas astron√¥micas, isso corresponde √† posi√ß√£o onde
            # a altitude √© 90 graus (diretamente acima)
            
            # Para o z√™nite, usamos as coordenadas locais do observador
            # Ascens√£o Reta = Tempo Sideral Local
            # Declina√ß√£o = Latitude do observador
            
            # Calcular tempo sideral local
            greenwich_sidereal = t.gast  # Greenwich Apparent Sidereal Time
            local_sidereal = greenwich_sidereal + longitude / 15.0  # Converter longitude para horas
            
            # Normalizar para 0-24 horas
            local_sidereal = local_sidereal % 24
            
            # Converter para graus (RA em horas * 15 = graus)
            zenith_ra = local_sidereal * 15
            zenith_dec = latitude
            
            # Verificar se os resultados s√£o v√°lidos
            if np.isnan(zenith_ra) or np.isnan(zenith_dec):
                raise ValueError(f"Coordenadas do z√™nite inv√°lidas: RA={zenith_ra}, Dec={zenith_dec}")
            
            print(f"Z√™nite calculado: RA={zenith_ra:.2f}¬∞, Dec={zenith_dec:.2f}¬∞")
            return zenith_ra, zenith_dec
            
        except Exception as e:
            raise HTTPException(status_code=500, detail=f"Erro no c√°lculo astron√¥mico: {str(e)}")

class StarCatalog:
    def __init__(self):
        self.stars_df = None
        self.load_catalog()
    
    def load_catalog(self):
        """Carrega o cat√°logo de estrelas"""
        try:
            # Usar cat√°logo Hipparcos integrado do Skyfield
            with load.open(hipparcos.URL) as f:
                stars = hipparcos.load_dataframe(f)
            
            # Remover estrelas com valores NaN em campos cr√≠ticos
            stars = stars.dropna(subset=['ra_hours', 'dec_degrees', 'magnitude'])
            
            # Filtrar estrelas mais brilhantes (magnitude < 6.0 para visibilidade a olho nu)
            bright_stars = stars[stars['magnitude'] < 6.0].copy()
            
            # Adicionar nomes pr√≥prios conhecidos
            star_names = self.get_star_names()
            bright_stars['proper_name'] = bright_stars.index.map(star_names)
            
            # Calcular coordenadas em graus
            bright_stars['ra_degrees'] = bright_stars['ra_hours'] * 15
            bright_stars['dec_degrees'] = bright_stars['dec_degrees']
            
            # Verificar se ainda temos dados v√°lidos
            if bright_stars.empty:
                print("Nenhuma estrela v√°lida encontrada no cat√°logo, usando fallback")
                self.create_fallback_catalog()
            else:
                self.stars_df = bright_stars
                print(f"Cat√°logo carregado com {len(bright_stars)} estrelas")
            
        except Exception as e:
            print(f"Erro ao carregar cat√°logo: {e}")
            # Criar cat√°logo m√≠nimo de fallback
            self.create_fallback_catalog()
    
    def get_star_names(self) -> dict:
        """Retorna dicion√°rio com nomes pr√≥prios de estrelas famosas"""
        return {
            32349: "Sirius",      # Alpha Canis Majoris
            30438: "Canopus",     # Alpha Carinae  
            69673: "Arcturus",    # Alpha Bootis
            91262: "Vega",        # Alpha Lyrae
            24436: "Capella",     # Alpha Aurigae
            37279: "Rigel",       # Beta Orionis
            37826: "Procyon",     # Alpha Canis Minoris
            25336: "Betelgeuse",  # Alpha Orionis
            5447: "Achernar",     # Alpha Eridani
            68702: "Hadar",       # Beta Centauri
            71683: "Altair",      # Alpha Aquilae
            21421: "Aldebaran",   # Alpha Tauri
            68756: "Antares",     # Alpha Scorpii
            24608: "Spica",       # Alpha Virginis
            113368: "Fomalhaut",  # Alpha Piscis Austrini
            26311: "Pollux",      # Beta Geminorum
            14576: "Deneb",       # Alpha Cygni
            11767: "Regulus",     # Alpha Leonis
        }
    
    def create_fallback_catalog(self):
        """Cria um cat√°logo m√≠nimo caso o principal falhe"""
        fallback_data = {
            'ra_hours': [6.75, 14.66, 18.62, 5.60, 7.58],
            'dec_degrees': [-16.72, -60.84, 38.78, 7.41, 28.03],
            'magnitude': [1.46, -0.74, 0.03, 0.87, 1.14],
            'proper_name': ['Sirius', 'Canopus', 'Vega', 'Betelgeuse', 'Capella']
        }
        
        self.stars_df = pd.DataFrame(fallback_data)
        self.stars_df['ra_degrees'] = self.stars_df['ra_hours'] * 15
        self.stars_df.index = range(len(self.stars_df))
    
    def find_zenith_star(self, zenith_ra: float, zenith_dec: float) -> dict:
        """Encontra a estrela mais relevante pr√≥xima ao z√™nite - APENAS estrelas com nomes pr√≥prios"""
        import numpy as np
        
        if self.stars_df is None or self.stars_df.empty:
            return None
        
        # Verificar se as coordenadas do z√™nite s√£o v√°lidas
        if np.isnan(zenith_ra) or np.isnan(zenith_dec):
            print(f"Coordenadas do z√™nite inv√°lidas: RA={zenith_ra}, Dec={zenith_dec}")
            return None
        
        # Calcular dist√¢ncia angular para todas as estrelas
        def angular_distance(ra1, dec1, ra2, dec2):
            """Calcula dist√¢ncia angular entre duas posi√ß√µes em graus"""
            try:
                ra1, dec1, ra2, dec2 = map(math.radians, [ra1, dec1, ra2, dec2])
                
                cos_dist = (math.sin(dec1) * math.sin(dec2) + 
                           math.cos(dec1) * math.cos(dec2) * math.cos(ra1 - ra2))
                
                # Evitar erros de arredondamento
                cos_dist = max(-1, min(1, cos_dist))
                return math.degrees(math.acos(cos_dist))
            except (ValueError, TypeError):
                return 180.0  # Dist√¢ncia m√°xima em caso de erro
        
        # Calcular dist√¢ncias
        distances = []
        for _, star in self.stars_df.iterrows():
            # Verificar se as coordenadas da estrela s√£o v√°lidas
            if np.isnan(star['ra_degrees']) or np.isnan(star['dec_degrees']):
                distances.append(180.0)  # Dist√¢ncia m√°xima para estrelas inv√°lidas
            else:
                dist = angular_distance(zenith_ra, zenith_dec, 
                                      star['ra_degrees'], star['dec_degrees'])
                distances.append(dist)
        
        self.stars_df['distance_to_zenith'] = distances
        
        # APENAS estrelas com nomes pr√≥prios - ignorar HD, HIP, etc.
        named_stars = self.stars_df[self.stars_df['proper_name'].notna()].copy()
        
        if named_stars.empty:
            print("Nenhuma estrela com nome pr√≥prio encontrada, usando fallback")
            # Fallback para estrelas brilhantes se n√£o houver nomes pr√≥prios
            bright_stars = self.stars_df[self.stars_df['magnitude'] < 2.0]
            if not bright_stars.empty:
                best_star = bright_stars.loc[bright_stars['distance_to_zenith'].idxmin()]
                return self.format_star_info(best_star, "bright_fallback")
            else:
                best_star = self.stars_df.loc[self.stars_df['distance_to_zenith'].idxmin()]
                return self.format_star_info(best_star, "closest_fallback")
        
        # Encontrar a estrela com nome pr√≥prio mais pr√≥xima do z√™nite
        best_named_star = named_stars.loc[named_stars['distance_to_zenith'].idxmin()]
        
        print(f"Estrela selecionada: {best_named_star['proper_name']} - Dist√¢ncia: {best_named_star['distance_to_zenith']:.2f}¬∞")
        
        return self.format_star_info(best_named_star, "named_star")
    
    def format_star_info(self, star, priority_type: str) -> dict:
        """Formata informa√ß√µes da estrela para exibi√ß√£o"""
        import numpy as np
        
        # Verificar e tratar valores NaN
        magnitude = star['magnitude'] if not np.isnan(star['magnitude']) else 5.0
        ra_degrees = star['ra_degrees'] if not np.isnan(star['ra_degrees']) else 0.0
        dec_degrees = star['dec_degrees'] if not np.isnan(star['dec_degrees']) else 0.0
        distance_to_zenith = star['distance_to_zenith'] if not np.isnan(star['distance_to_zenith']) else 90.0
        
        # Determinar cor baseada na magnitude (simplificado)
        if magnitude < 1.0:
            color = "#E6F3FF"  # Azul muito claro para estrelas muito brilhantes
        elif magnitude < 2.0:
            color = "#CCE7FF"  # Azul claro
        elif magnitude < 3.0:
            color = "#B3DBFF"  # Azul m√©dio
        else:
            color = "#99CFFF"  # Azul mais escuro
        
        # Calcular dist√¢ncia estimada (simplificado baseado na magnitude)
        try:
            estimated_distance = max(10, int(10 ** ((magnitude + 5) / 5)))
        except (ValueError, OverflowError):
            estimated_distance = 100  # Valor padr√£o
        
        # Obter nome da estrela
        star_name = "Estrela Desconhecida"
        if pd.notna(star.get('proper_name')):
            star_name = star['proper_name']
        elif hasattr(star, 'name') and star.name:
            star_name = f"HD {star.name}"
        
        # Calcular velocidade radial estimada
        radial_velocity_info = self.estimate_radial_velocity(star_name, magnitude)
        
        # Estimar classe espectral
        spectral_class = self.estimate_spectral_class(magnitude)
        
        # Gerar curiosidades da estrela
        curiosities = self.generate_star_curiosities(star_name, magnitude, estimated_distance, spectral_class)
        
        return {
            'name': star_name,
            'magnitude': round(magnitude, 2),
            'ra_degrees': round(ra_degrees, 2),
            'dec_degrees': round(dec_degrees, 2),
            'distance_to_zenith': round(distance_to_zenith, 2),
            'estimated_distance_ly': estimated_distance,
            'color': color,
            'priority_type': priority_type,
            'spectral_class': spectral_class,
            'constellation': self.estimate_constellation(ra_degrees, dec_degrees),
            'radial_velocity': radial_velocity_info['velocity'],
            'radial_velocity_direction': radial_velocity_info['direction'],
            'radial_velocity_description': radial_velocity_info['description'],
            'curiosities': curiosities
        }
    
    def estimate_spectral_class(self, magnitude: float) -> str:
        """Estima classe espectral baseada na magnitude (simplificado)"""
        import numpy as np
        
        # Tratar valores NaN
        if np.isnan(magnitude):
            magnitude = 5.0
            
        if magnitude < 0:
            return "O5V - Supergigante Azul"
        elif magnitude < 1:
            return "B2V - Gigante Azul-Branca"
        elif magnitude < 2:
            return "A0V - Estrela Branca"
        elif magnitude < 3:
            return "F5V - Estrela Branco-Amarelada"
        elif magnitude < 4:
            return "G2V - An√£ Amarela"
        else:
            return "K0V - An√£ Laranja"
    
    def estimate_constellation(self, ra: float, dec: float) -> str:
        """Estima constela√ß√£o baseada em coordenadas (simplificado)"""
        import numpy as np
        
        # Tratar valores NaN
        if np.isnan(ra):
            ra = 0.0
        if np.isnan(dec):
            dec = 0.0
            
        # Mapeamento muito simplificado baseado em RA
        ra_hours = ra / 15
        
        if 0 <= ra_hours < 2:
            return "Pisces"
        elif 2 <= ra_hours < 4:
            return "Aries"
        elif 4 <= ra_hours < 6:
            return "Taurus"
        elif 6 <= ra_hours < 8:
            return "Gemini"
        elif 8 <= ra_hours < 10:
            return "Cancer"
        elif 10 <= ra_hours < 12:
            return "Leo"
        elif 12 <= ra_hours < 14:
            return "Virgo"
        elif 14 <= ra_hours < 16:
            return "Libra"
        elif 16 <= ra_hours < 18:
            return "Scorpius"
        elif 18 <= ra_hours < 20:
            return "Sagittarius"
        elif 20 <= ra_hours < 22:
            return "Capricornus"
        else:
            return "Aquarius"
    
    def estimate_radial_velocity(self, star_name: str, magnitude: float) -> dict:
        """Estima velocidade radial da estrela baseada em dados conhecidos"""
        import random
        
        # Velocidades radiais conhecidas para estrelas famosas (em km/s)
        known_velocities = {
            'Sirius': {'velocity': -5.5, 'direction': 'approaching'},
            'Vega': {'velocity': -13.9, 'direction': 'approaching'},
            'Arcturus': {'velocity': -5.2, 'direction': 'approaching'},
            'Capella': {'velocity': 30.2, 'direction': 'receding'},
            'Rigel': {'velocity': 17.8, 'direction': 'receding'},
            'Betelgeuse': {'velocity': 21.9, 'direction': 'receding'},
            'Aldebaran': {'velocity': 54.3, 'direction': 'receding'},
            'Spica': {'velocity': 1.0, 'direction': 'stable'},
            'Antares': {'velocity': -3.4, 'direction': 'approaching'},
            'Fomalhaut': {'velocity': 6.5, 'direction': 'receding'},
            'Pollux': {'velocity': 3.3, 'direction': 'receding'},
            'Deneb': {'velocity': -4.5, 'direction': 'approaching'},
            'Regulus': {'velocity': 5.9, 'direction': 'receding'},
            'Altair': {'velocity': -26.1, 'direction': 'approaching'},
            'Procyon': {'velocity': -3.2, 'direction': 'approaching'}
        }
        
        if star_name in known_velocities:
            data = known_velocities[star_name]
            velocity = abs(data['velocity'])
            direction = data['direction']
        else:
            # Estimar baseado na magnitude e tipo espectral
            # Estrelas mais brilhantes tendem a ter velocidades menores (mais pr√≥ximas)
            if magnitude < 1.0:
                velocity = random.uniform(5, 25)
            elif magnitude < 2.0:
                velocity = random.uniform(10, 40)
            elif magnitude < 3.0:
                velocity = random.uniform(15, 60)
            else:
                velocity = random.uniform(20, 80)
            
            # Dire√ß√£o aleat√≥ria mas com tend√™ncia baseada na posi√ß√£o gal√°ctica
            direction = random.choice(['approaching', 'receding', 'stable'])
        
        # Gerar descri√ß√£o
        if direction == 'approaching':
            description = f"Se aproximando de n√≥s a {velocity:.1f} km/s"
            emoji = "üîµ"
        elif direction == 'receding':
            description = f"Se afastando de n√≥s a {velocity:.1f} km/s"
            emoji = "üî¥"
        else:
            description = f"Movimento radial est√°vel (~{velocity:.1f} km/s)"
            emoji = "‚ö™"
        
        return {
            'velocity': round(velocity, 1),
            'direction': direction,
            'description': f"{emoji} {description}"
        }
    
    def generate_star_curiosities(self, star_name: str, magnitude: float, distance: float, spectral_class: str) -> dict:
        """Gera curiosidades interessantes sobre a estrela"""
        import random
        
        # Base de dados de curiosidades para estrelas famosas
        famous_stars_data = {
            'Sirius': {
                'age_billion_years': 0.25,
                'history': 'Conhecida pelos antigos eg√≠pcios como Sopdet, Sirius era associada √† deusa √çsis. Seu surgimento no c√©u marcava o in√≠cio da inunda√ß√£o anual do Nilo, crucial para a agricultura.',
                'fun_facts': [
                    '√â na verdade um sistema estelar duplo',
                    'Sua companheira √© uma an√£ branca super densa',
                    '√â 25 vezes mais luminosa que o Sol',
                    'Aparece com cores cintilantes devido √† atmosfera terrestre'
                ]
            },
            'Vega': {
                'age_billion_years': 0.455,
                'history': 'Vega foi a primeira estrela fotografada em 1850 e a primeira a ter seu espectro registrado. H√° 12.000 anos, era a estrela polar, e voltar√° a ser em cerca de 13.727 d.C.',
                'fun_facts': [
                    'Foi usada como padr√£o de magnitude zero',
                    'Tem um disco de detritos que pode indicar planetas',
                    'Gira t√£o r√°pido que √© achatada nos polos',
                    'Era a estrela polar dos neandertais'
                ]
            },
            'Betelgeuse': {
                'age_billion_years': 0.01,
                'history': 'Uma das estrelas mais famosas de √ìrion, Betelgeuse √© uma supergigante vermelha que pode explodir como supernova a qualquer momento (astronomicamente falando).',
                'fun_facts': [
                    'Se estivesse no lugar do Sol, englobaria a √≥rbita de J√∫piter',
                    'Sua luminosidade varia irregularmente',
                    'Pode explodir nos pr√≥ximos 100.000 anos',
                    'Ejeta material suficiente para formar planetas'
                ]
            },
            'Rigel': {
                'age_billion_years': 0.008,
                'history': 'Apesar de ser designada como Beta Orionis, Rigel √© geralmente mais brilhante que Betelgeuse (Alpha Orionis). √â uma das estrelas mais luminosas conhecidas.',
                'fun_facts': [
                    '√â 120.000 vezes mais luminosa que o Sol',
                    '√â na verdade um sistema m√∫ltiplo de 4 estrelas',
                    'Suas camadas externas s√£o ejetadas por ventos estelares',
                    '√â jovem demais para ter planetas rochosos formados'
                ]
            },
            'Arcturus': {
                'age_billion_years': 7.1,
                'history': 'Arcturus √© uma das estrelas mais antigas do halo gal√°ctico. Move-se de forma diferente das outras estrelas, sugerindo que pertencia a uma gal√°xia menor que foi absorvida pela Via L√°ctea.',
                'fun_facts': [
                    '√â uma das estrelas mais r√°pidas no c√©u',
                    'Tem baixa metalicidade, indicando origem antiga',
                    'Em 1933, sua luz foi usada para abrir a Feira Mundial de Chicago',
                    'Pode ser um intruso de uma gal√°xia antiga'
                ]
            },
            'Capella': {
                'age_billion_years': 0.59,
                'history': 'Capella √© na verdade um sistema complexo de seis estrelas. Era considerada uma √∫nica estrela pelos antigos, mas telesc√≥pios modernos revelaram sua verdadeira natureza m√∫ltipla.',
                'fun_facts': [
                    'Cont√©m duas gigantes douradas e quatro an√£s vermelhas',
                    '√â a terceira estrela mais brilhante do hemisf√©rio norte',
                    'Suas componentes principais orbitam uma √† outra em 104 dias',
                    'Foi usada para testes iniciais de interferometria estelar'
                ]
            }
        }
        
        # Se a estrela est√° na base de dados
        if star_name in famous_stars_data:
            star_data = famous_stars_data[star_name]
            age = star_data['age_billion_years']
            history = star_data['history']
            fun_facts = star_data['fun_facts']
        else:
            # Gerar dados baseados nas caracter√≠sticas da estrela
            age = self.estimate_star_age(magnitude, spectral_class)
            history = self.generate_generic_history(star_name, spectral_class)
            fun_facts = self.generate_generic_facts(spectral_class, magnitude, distance)
        
        # Converter idade para diferentes escalas de tempo
        age_in_years = age * 1_000_000_000
        light_travel_years = distance
        
        # Mensagem temporal Murphy-1
        temporal_message = self.generate_temporal_message(age, light_travel_years)
        
        return {
            'age_billion_years': age,
            'age_formatted': f"{age:.2f} bilh√µes de anos",
            'history': history,
            'fun_facts': fun_facts,
            'temporal_message': temporal_message,
            'birth_era': self.determine_birth_era(age),
            'timeline_comparison': self.create_timeline_comparison(age, light_travel_years)
        }
    
    def estimate_star_age(self, magnitude: float, spectral_class: str) -> float:
        """Estima a idade da estrela baseada em suas caracter√≠sticas"""
        import random
        
        # Idade estimada baseada na classe espectral
        if 'O' in spectral_class or 'B' in spectral_class:
            # Estrelas muito quentes e jovens
            return random.uniform(0.001, 0.1)
        elif 'A' in spectral_class:
            # Estrelas quentes, relativamente jovens
            return random.uniform(0.1, 2.0)
        elif 'F' in spectral_class:
            # Estrelas similares ao Sol, mas um pouco mais quentes
            return random.uniform(1.0, 8.0)
        elif 'G' in spectral_class:
            # Estrelas tipo solar
            return random.uniform(1.0, 12.0)
        elif 'K' in spectral_class:
            # Estrelas laranjas, de longa vida
            return random.uniform(5.0, 15.0)
        elif 'M' in spectral_class:
            # An√£s vermelhas, muito longevas
            return random.uniform(8.0, 13.8)  # At√© a idade do universo
        else:
            # Estimativa gen√©rica
            return random.uniform(1.0, 10.0)
    
    def generate_generic_history(self, star_name: str, spectral_class: str) -> str:
        """Gera uma hist√≥ria gen√©rica para estrelas menos conhecidas"""
        type_descriptions = {
            'O': 'uma jovem gigante azul, nascida em uma regi√£o de intensa forma√ß√£o estelar',
            'B': 'uma estrela jovem e quente, t√≠pica de aglomerados estelares ativos',
            'A': 'uma estrela branca em sua sequ√™ncia principal, queimando hidrog√™nio em seu n√∫cleo',
            'F': 'uma estrela branco-amarelada, ligeiramente mais massiva que o Sol',
            'G': 'uma estrela amarela similar ao nosso Sol, est√°vel em sua sequ√™ncia principal',
            'K': 'uma estrela laranja de longa vida, menor e mais fria que o Sol',
            'M': 'uma an√£ vermelha, o tipo mais comum de estrela na gal√°xia'
        }
        
        spectral_type = spectral_class[0] if spectral_class else 'G'
        description = type_descriptions.get(spectral_type, 'uma estrela de caracter√≠sticas interessantes')
        
        return f"{star_name} √© {description}. Como muitas estrelas em nossa regi√£o da gal√°xia, ela se formou a partir do colapso de uma nuvem molecular, iniciando sua jornada c√≥smica atrav√©s do espa√ßo-tempo."
    
    def generate_generic_facts(self, spectral_class: str, magnitude: float, distance: float) -> list:
        """Gera fatos interessantes baseados nas caracter√≠sticas da estrela"""
        facts = []
        
        # Fatos baseados na dist√¢ncia
        if distance < 50:
            facts.append(f"√â uma das estrelas mais pr√≥ximas da Terra, a apenas {distance:.0f} anos-luz")
        elif distance > 1000:
            facts.append(f"Sua luz viajou {distance:,.0f} anos-luz atrav√©s do espa√ßo para chegar at√© voc√™")
        
        # Fatos baseados na magnitude
        if magnitude < 2.0:
            facts.append("√â vis√≠vel a olho nu mesmo em c√©us urbanos com polui√ß√£o luminosa")
        elif magnitude < 4.0:
            facts.append("√â facilmente vis√≠vel a olho nu em noites claras")
        else:
            facts.append("Requer c√©us escuros para ser observada a olho nu")
        
        # Fatos baseados na classe espectral
        if 'O' in spectral_class or 'B' in spectral_class:
            facts.append("Queima combust√≠vel t√£o rapidamente que viver√° apenas milh√µes de anos")
            facts.append("Termina sua vida de forma dram√°tica como supernova")
        elif 'G' in spectral_class:
            facts.append("Tem temperatura e composi√ß√£o similares ao nosso Sol")
            facts.append("Pode hospedar planetas com condi√ß√µes favor√°veis √† vida")
        elif 'M' in spectral_class:
            facts.append("Viver√° por trilh√µes de anos, muito al√©m da idade atual do universo")
            facts.append("√â parte do tipo mais comum de estrela na Via L√°ctea")
        
        return facts[:4]  # Retornar no m√°ximo 4 fatos
    
    def generate_temporal_message(self, age_billion_years: float, light_distance: float) -> str:
        """Gera mensagem temporal estilo Murphy-1/Interestelar"""
        age_millions = age_billion_years * 1000
        
        if age_billion_years < 0.1:
            temporal_context = "uma estrela-crian√ßa no tempo c√≥smico"
        elif age_billion_years < 1:
            temporal_context = "uma estrela jovem na linha temporal universal"
        elif age_billion_years < 5:
            temporal_context = "uma estrela em sua idade adulta c√≥smica"
        elif age_billion_years < 10:
            temporal_context = "uma estrela veterana do cosmos"
        else:
            temporal_context = "uma estrela anci√£, testemunha da evolu√ß√£o gal√°ctica"
        
        return f"No espa√ßo-tempo quadridimensional, {temporal_context} observou sua chegada ao universo. Sua luz, viajando por {light_distance:,.0f} anos atrav√©s das coordenadas espaciais, carrega informa√ß√µes de quando voc√™ ainda era apenas uma possibilidade qu√¢ntica."
    
    def determine_birth_era(self, age_billion_years: float) -> str:
        """Determina a era c√≥smica do nascimento da estrela"""
        if age_billion_years > 13:
            return "Era Primordial (imposs√≠vel - anterior ao Big Bang)"
        elif age_billion_years > 10:
            return "Era das Primeiras Gal√°xias"
        elif age_billion_years > 8:
            return "Era da Forma√ß√£o Gal√°ctica Ativa"
        elif age_billion_years > 5:
            return "Era da Maturidade Gal√°ctica"
        elif age_billion_years > 1:
            return "Era Solar (similar ao Sol)"
        else:
            return "Era Moderna da Forma√ß√£o Estelar"
    
    def create_timeline_comparison(self, star_age: float, light_travel: float) -> dict:
        """Cria compara√ß√µes temporais interessantes"""
        earth_age = 4.54  # bilh√µes de anos
        universe_age = 13.8  # bilh√µes de anos
        
        star_age_years = star_age * 1_000_000_000
        
        comparisons = []
        
        if star_age < earth_age:
            difference = earth_age - star_age
            comparisons.append(f"Nasceu {difference:.1f} bilh√µes de anos ap√≥s a Terra")
        else:
            difference = star_age - earth_age
            comparisons.append(f"√â {difference:.1f} bilh√µes de anos mais antiga que a Terra")
        
        if light_travel < 100:
            comparisons.append(f"Sua luz √© praticamente contempor√¢nea √† escala humana")
        elif light_travel < 1000:
            comparisons.append(f"Sua luz come√ßou a jornada antes das primeiras civiliza√ß√µes")
        else:
            comparisons.append(f"Sua luz come√ßou a viajar na era dos dinossauros")
        
        return {
            'star_age_percent_of_universe': (star_age / universe_age) * 100,
            'comparisons': comparisons,
            'era_when_light_started': self.calculate_light_start_era(light_travel)
        }
    
    def calculate_light_start_era(self, light_years: float) -> str:
        """Calcula que era hist√≥rica a luz come√ßou a viajar"""
        years_ago = light_years  # anos-luz = anos no passado
        
        if years_ago < 100:
            return "Era moderna recente"
        elif years_ago < 2000:
            return "Era do Imp√©rio Romano"
        elif years_ago < 10000:
            return "Era Neol√≠tica"
        elif years_ago < 100000:
            return "Era dos primeiros Homo sapiens"
        elif years_ago < 1000000:
            return "Era Pleistocena"
        elif years_ago < 65000000:
            return "Era Cenozoica"
        elif years_ago < 250000000:
            return "Era dos dinossauros"
        else:
            return "Era Paleozoica ou anterior"

def get_calculator():
    """Get calculator instance with lazy loading"""
    global calculator
    if calculator is None:
        calculator = AstronomicalCalculator()
    return calculator

def get_star_catalog():
    """Get star catalog instance with lazy loading"""
    global star_catalog
    if star_catalog is None:
        star_catalog = StarCatalog()
    return star_catalog

def get_modern_sky_renderer():
    """Get modern sky renderer instance with lazy loading"""
    global modern_sky_renderer
    if modern_sky_renderer is None:
        modern_sky_renderer = ModernSkyRenderer()
    return modern_sky_renderer

@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    """P√°gina inicial do Murphy-1"""
    try:
        print(f"üè† Home endpoint called")
        print(f"üè† Templates object: {templates}")
        print(f"üè† Looking for index.html in: {BASE_DIR / 'templates' / 'index.html'}")
        
        # Verificar se o arquivo existe antes de tentar renderizar
        template_path = BASE_DIR / 'templates' / 'index.html'
        if not template_path.exists():
            return HTMLResponse(content=f"""
            <html>
            <body>
                <h1>Murphy-1 - Erro de Template</h1>
                <p>Template index.html n√£o encontrado!</p>
                <p>Procurando em: {template_path}</p>
                <p>BASE_DIR: {BASE_DIR}</p>
                <p>Templates directory exists: {(BASE_DIR / 'templates').exists()}</p>
                <p>Files in app directory:</p>
                <ul>
                    {"".join(f"<li>{f.name}</li>" for f in BASE_DIR.iterdir() if f.is_file())}
                </ul>
                <p>Directories in app:</p>
                <ul>
                    {"".join(f"<li>{d.name}/</li>" for d in BASE_DIR.iterdir() if d.is_dir())}
                </ul>
            </body>
            </html>
            """, status_code=500)
        
        return templates.TemplateResponse("index.html", {"request": request})
    except Exception as e:
        print(f"‚ùå Error in home endpoint: {str(e)}")
        print(f"‚ùå Error type: {type(e)}")
        import traceback
        print(f"‚ùå Traceback: {traceback.format_exc()}")
        
        return HTMLResponse(content=f"""
        <html>
        <body>
            <h1>Murphy-1 - Erro</h1>
            <p>Erro ao carregar template: {str(e)}</p>
            <p>Tipo: {type(e).__name__}</p>
            <p>BASE_DIR: {BASE_DIR}</p>
        </body>
        </html>
        """, status_code=500)

@app.post("/calculate")
async def calculate_cosmic_echo(
    request: Request,
    birth_date: str = Form(...),
    birth_time: str = Form(...),
    city: str = Form(...),
    country: str = Form(...)
):
    """Calcula a an√°lise temporal Murphy-1 do usu√°rio"""
    try:
        # Parse da data e hora
        birth_datetime_str = f"{birth_date} {birth_time}"
        birth_datetime = datetime.strptime(birth_datetime_str, "%Y-%m-%d %H:%M")
        
        # Obter coordenadas
        latitude, longitude = get_calculator().get_coordinates_from_location(city, country)
        
        # Calcular coordenadas do z√™nite
        zenith_ra, zenith_dec = get_calculator().calculate_zenith_coordinates(
            birth_datetime, latitude, longitude
        )
        
        # Encontrar estrela do z√™nite
        zenith_star = get_star_catalog().find_zenith_star(zenith_ra, zenith_dec)
        
        if not zenith_star:
            raise HTTPException(status_code=500, detail="N√£o foi poss√≠vel encontrar uma estrela adequada")
        
        # Gerar dados para visualiza√ß√£o moderna
        modern_sky_data = get_modern_sky_renderer().generate_modern_sky_data(
            zenith_ra, zenith_dec, zenith_star, 
            birth_datetime, latitude, longitude
        )
        
        # Calcular perfil astrol√≥gico completo
        astro_profile = AstrologyCalculator().generate_cosmic_profile(
            birth_datetime, latitude, longitude
        )
        
        # Preparar dados para o template
        result_data = {
            'birth_info': {
                'date': birth_date,
                'time': birth_time,
                'location': f"{city}, {country}",
                'coordinates': f"{latitude:.2f}¬∞, {longitude:.2f}¬∞"
            },
            'zenith_coordinates': {
                'ra': zenith_ra,
                'dec': zenith_dec
            },
            'star': zenith_star,
            'cosmic_message': generate_cosmic_message(zenith_star),
            'modern_sky_data': modern_sky_data,
            'astrology': astro_profile
        }
        
        return templates.TemplateResponse("result.html", {
            "request": request,
            "data": result_data
        })
        
    except Exception as e:
        return templates.TemplateResponse("error.html", {
            "request": request,
            "error": str(e)
        })

def generate_cosmic_message(star: dict) -> str:
    """Gera mensagem c√≥smica personalizada"""
    distance = star['estimated_distance_ly']
    name = star['name']
    
    if star['priority_type'] == 'named_close':
        return f"A majestosa {name} estava perfeitamente alinhada com voc√™ no seu primeiro momento. Sua luz viajou {distance:,} anos atrav√©s do cosmos para testemunhar seu nascimento."
    elif star['priority_type'] == 'bright_close':
        return f"A brilhante estrela {name} iluminava seu z√™nite quando voc√™ chegou ao mundo. Por {distance:,} anos, sua luz cruzou o universo para encontrar voc√™."
    else:
        return f"A estrela {name} era sua guardi√£ celestial no momento do seu nascimento. Atrav√©s de {distance:,} anos-luz de jornada c√≥smica, sua luz chegou at√© voc√™."

@app.get("/api/health")
async def health_check():
    """Endpoint de verifica√ß√£o de sa√∫de - simples e r√°pido para Railway"""
    return {
        "status": "healthy",
        "message": "Murphy-1 est√° operacional!",
        "timestamp": datetime.now().isoformat()
    }

@app.get("/test")
async def test_endpoint():
    """Endpoint de teste simples para debug"""
    return {"message": "Murphy-1 est√° funcionando! üöÄ", "time": datetime.now().isoformat()}

@app.get("/debug-structure")
async def debug_structure():
    """Debug endpoint para verificar estrutura de diret√≥rios"""
    import os
    
    result = {
        "base_dir": str(BASE_DIR),
        "cwd": os.getcwd(),
        "app_dir_contents": [],
        "templates_exists": (BASE_DIR / "templates").exists(),
        "static_exists": (BASE_DIR / "static").exists(),
        "templates_contents": [],
        "static_contents": []
    }
    
    # Listar conte√∫do do diret√≥rio app
    try:
        for item in BASE_DIR.iterdir():
            result["app_dir_contents"].append({
                "name": item.name,
                "is_dir": item.is_dir(),
                "is_file": item.is_file()
            })
    except Exception as e:
        result["app_dir_error"] = str(e)
    
    # Listar templates
    try:
        if (BASE_DIR / "templates").exists():
            for item in (BASE_DIR / "templates").iterdir():
                result["templates_contents"].append(item.name)
    except Exception as e:
        result["templates_error"] = str(e)
    
    # Listar static
    try:
        if (BASE_DIR / "static").exists():
            for item in (BASE_DIR / "static").iterdir():
                result["static_contents"].append(item.name)
    except Exception as e:
        result["static_error"] = str(e)
    
    return result

# Fallback manual para arquivos est√°ticos se o mount n√£o funcionar
@app.get("/static/{file_path:path}")
async def serve_static_fallback(file_path: str):
    """Fallback para servir arquivos est√°ticos manualmente"""
    
    file_full_path = BASE_DIR / "static" / file_path
    print(f"üìÅ Requesting static file: {file_path}")
    print(f"üìÅ Full path: {file_full_path}")
    print(f"üìÅ File exists: {file_full_path.exists()}")
    
    if file_full_path.exists() and file_full_path.is_file():
        # Determinar tipo MIME
        mime_types = {
            '.css': 'text/css',
            '.js': 'application/javascript',
            '.json': 'application/json',
            '.png': 'image/png',
            '.jpg': 'image/jpeg',
            '.jpeg': 'image/jpeg',
            '.gif': 'image/gif',
            '.svg': 'image/svg+xml',
            '.ico': 'image/x-icon'
        }
        
        file_ext = file_full_path.suffix.lower()
        media_type = mime_types.get(file_ext, 'application/octet-stream')
        
        return FileResponse(str(file_full_path), media_type=media_type)
    else:
        raise HTTPException(status_code=404, detail=f"Static file not found: {file_path}")

# Remover a execu√ß√£o direta para deploy
# if __name__ == "__main__":
#     uvicorn.run(app, host="0.0.0.0", port=8000) 